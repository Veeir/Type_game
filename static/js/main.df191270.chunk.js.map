{"version":3,"sources":["index.js"],"names":["App","props","race","raceArray","split","state","currentRace","currentRaceArray","currentWord","currentWordIndex","currentIndex","wordCount","length","raceHighlightArray","Array","fill","raceActive","elapsedTime","wpm","backspace","bind","validInput","invalidInput","wordFinished","checkRaceFinished","loadNewRace","startWpmTimer","stopWpmTimer","this","setState","Math","round","newRace","races","floor","random","startTime","Date","now","timer","setInterval","clearInterval","console","log","className","RaceView","highlight","SummaryView","React","Component","Race","Input","Counter","event","target","value","onClick","createRaceSpans","colorKey","map","char","index","inputWord","backspaceOccured","eventOccured","inputHandler","eventWord","backspaceEventOccured","persist","nextProps","nextState","shouldComponentUpdate","minWordLength","substring","wordsMatching","type","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df191270.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//Top level\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        const race = \"This is a test race.\";\n        const raceArray = race.split(\" \");\n        this.state = {\n            currentRace: race,\n            currentRaceArray: raceArray,\n            currentWord: raceArray[0],\n            currentWordIndex: 0,\n            currentIndex: 0,\n            wordCount: raceArray.length,\n            raceHighlightArray: Array(race.length).fill(0),\n            raceActive: false,\n            elapsedTime: 0,\n            wpm: 0\n        };\n        this.backspace = this.backspace.bind(this);\n        this.validInput = this.validInput.bind(this);\n        this.invalidInput = this.invalidInput.bind(this);\n        this.wordFinished = this.wordFinished.bind(this);\n        this.checkRaceFinished = this.checkRaceFinished.bind(this);\n        this.loadNewRace = this.loadNewRace.bind(this);\n        this.startWpmTimer = this.startWpmTimer.bind(this);\n        this.stopWpmTimer = this.stopWpmTimer.bind(this);\n    }\n\n    backspace() {\n        let raceHighlightArray = this.state.raceHighlightArray;\n        raceHighlightArray[this.state.currentIndex - 1] = 0;\n        this.setState((state) => (\n            {\n                currentIndex: state.currentIndex - 1,\n                raceHighlightArray: raceHighlightArray\n            }\n        ));\n    }\n\n    validInput() {\n        let raceHighlightArray = this.state.raceHighlightArray;\n        raceHighlightArray[this.state.currentIndex] = 1;\n        this.setState((state) => (\n            {\n                currentIndex: state.currentIndex + 1,\n                raceHighlightArray: raceHighlightArray\n            }\n        ), this.checkRaceFinished());\n    }\n\n    invalidInput() {\n        let raceHighlightArray = this.state.raceHighlightArray;\n        raceHighlightArray[this.state.currentIndex] = 2;\n        this.setState((state) => (\n            {\n                currentIndex: state.currentIndex + 1,\n                raceHighlightArray: raceHighlightArray\n            }\n        ));\n    }\n\n    wordFinished() {\n        const currentWordIndex = this.state.currentWordIndex;\n\n        this.setState((state) => (\n            {\n                currentWord: state.currentRaceArray[currentWordIndex + 1],\n                currentWordIndex: this.state.currentWordIndex + 1,\n                wpm: (Math.round((currentWordIndex / state.elapsedTime) * 60))\n            }\n        ));\n    }\n\n    checkRaceFinished() {\n        const raceLength = this.state.currentRace.length;\n        const index = this.state.currentIndex;\n\n        if(raceLength-1 === index) {\n            this.setState(\n                {\n                    raceActive: false\n                }, this.stopWpmTimer);\n        }\n    }\n\n    loadNewRace(newRace) {\n        let currentRace = this.state.currentRace;\n        let raceArray = this.state.currentRaceArray;\n        let currentWord = this.state.currentRaceArray[0];\n        let wordCount = this.state.wordCount;\n        const raceHighlightArray = Array(this.state.currentRace.length).fill(0);\n\n        if (newRace === \"true\") {\n            const newRaceObj = races[Math.floor(Math.random()*races.length)]\n            currentRace = newRaceObj.race;\n            raceArray = currentRace.split(\" \");\n            currentWord = raceArray[0];\n            wordCount = raceArray.length;\n        }\n\n        this.setState({\n            currentRace: currentRace,\n            currentRaceArray: raceArray,\n            currentWord: currentWord,\n            currentWordIndex: 0,\n            currentIndex: 0,\n            wordCount: wordCount,\n            raceHighlightArray: raceHighlightArray,\n            raceActive: true,\n            wpm: 0\n        }, this.startWpmTimer);\n    }\n\n    startWpmTimer() {\n        const startTime = Date.now();\n        this.timer = setInterval(() => {\n            this.setState({elapsedTime: Math.floor((Date.now() - startTime) / 1000)});\n          }, 1000);\n    }\n\n    stopWpmTimer() {\n        clearInterval(this.timer);\n        this.setState(\n            {elapsedTime: 0}\n        );\n    }\n\n    render(){\n        console.log(this.state.raceHighlightArray);\n        console.log(\"CW:\" + this.state.currentWord);\n        console.log(this.state.currentIndex);\n        console.log(this.state.elapsedTime);\n        return (\n            <div className=\"raceWigit\">\n                {this.state.raceActive ? (\n                    <RaceView \n                        race={this.state.currentRace}\n                        highlight={this.state.raceHighlightArray}\n                        currentIndex={this.state.currentIndex}\n                        currentWord={this.state.currentWord}\n                        wpm={this.state.wpm}\n                        backspace={this.backspace}\n                        validInput={this.validInput}\n                        invalidInput={this.invalidInput}\n                        wordFinished={this.wordFinished}\n                    />\n                ) : (\n                    <SummaryView\n                        wpm={this.state.wpm}\n                        loadNewRace={this.loadNewRace}\n                    />   \n                )} \n                </div>            \n        );\n    }\n}\n\nfunction RaceView(props) {\n    return (\n        <div>\n            <Race \n                race={props.race}\n                highlight={props.highlight}\n                currentIndex={props.currentIndex}\n            />\n            <Input \n                currentWord={props.currentWord}\n                backspace={props.backspace}\n                validInput={props.validInput}\n                invalidInput={props.invalidInput}\n                wordFinished={props.wordFinished}\n            />\n            <Counter \n                wpm={props.wpm}\n            />\n        </div>\n    );\n}\n\nclass SummaryView extends React.Component {\n\n    newRace = (event) => {\n        this.props.loadNewRace(event.target.value);\n    }\n\n    render() {\n        return (\n            <div>\n                <p>WPM: {this.props.wpm}</p>\n                <button onClick={this.newRace} value={\"true\"} >New Race</button>\n                <button onClick={this.newRace} value={\"false\"} >Try Again</button>\n            </div>\n        );\n    }\n}\n\nclass Race extends React.Component {\n    constructor(props) {\n        super(props);\n        this.createRaceSpans = this.createRaceSpans.bind(this);\n    }\n\n    createRaceSpans() {\n        const highlight = this.props.highlight;\n        const race = this.props.race.split(\"\");\n        const colorKey = ['blank', 'correct', 'incorrect'];\n\n        const raceSpans = race.map((char, index) =>\n            <span className={colorKey[highlight[index]]}>{char}</span>\n        );\n        return raceSpans;\n    }\n\n    render() {\n        return(\n            <div className=\"race\">\n                <p>\n                    {this.createRaceSpans()}\n                </p>\n            </div>\n        );\n    }\n}\n\nclass Input extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputWord: \"\",\n            backspaceOccured: false,\n            eventOccured: false\n        };\n        this.inputHandler = this.inputHandler.bind(this);\n    }\n\n    inputHandler(event) {\n        const backspaceEventOccured = checkBackSpaceEvent(event.target.value, this.state.inputWord);\n        event.persist();\n        this.setState(() => ({\n            inputWord: event.target.value,\n            backspaceOccured: backspaceEventOccured,\n            eventOccured: true\n        }));\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (nextState !== this.state);\n    }\n\n    componentDidUpdate(){\n        const currentWord = this.props.currentWord;\n        const inputWord = this.state.inputWord;\n        const backspaceOccured = this.state.backspaceOccured;\n\n        if (this.shouldComponentUpdate()){\n            if (backspaceOccured) {\n                this.props.backspace();\n            }else if (inputWord === currentWord + \" \") {\n                this.props.wordFinished();\n                this.setState({inputWord: \"\"});\n            }else if (!wordsMatching(inputWord, currentWord)) {\n                this.props.invalidInput();\n            }else {\n                this.props.validInput();\n            }\n        }\n    }\n\n    component\n\n    render() {\n        return (\n            <div className=\"input\">\n                <form>\n                    <input className=\"inputForm\" type=\"text\" value={this.state.inputWord} onChange={this.inputHandler}/>\n                </form>\n            </div>\n        );\n    }\n}\n\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n            <div>WPM: {this.props.wpm}</div>\n        );\n    }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//Helper Functions\nfunction checkBackSpaceEvent(eventWord, inputWord) {\n    return ((eventWord.length + 1) === inputWord.length);\n}\n\nfunction wordsMatching(inputWord, currentWord) {\n    const minWordLength = inputWord.length; //Math.min(inputWord.length, currentWord.length);\n    return inputWord.substring(0, minWordLength) === currentWord.substring(0, minWordLength);\n}\n\nconst races = [\n    {\n        \"race\": \"This is a test race.\",\n        \"length\":  20\n    },\n\n    {\n        \"race\": \"I need an easy friend, I do with an ear to lend, I do think you fit this shoe, I do, won't you have a clue?\",\n        \"length\":  107\n    },\n\n    {\n        \"race\": \"Down in a hole and they've put all the stones in their place, I've eaten the sun so my tongue has been burned of the taste, I have been guilty of kicking myself in the teeth, I will speak no more of my feelings beneath\",\n        \"length\":  208\n    },\n\n    {\n        \"race\": \"Into the flood again, Same old trip it was back then, So I made a big mistake, Try to see it once my way.\",\n        \"length\":  105\n    },\n\n    {\n        \"race\": \"I dream about how it's going to end, Approaching me quickly. Leaving a life of fear, I only want my mind to be clear.\",\n        \"length\":  117\n    },\n\n    {\n        \"race\": \"And I don't understand why I sleep all day, And I start to complain that there's no rain, And all I can do is read a book to stay awake, And it rips my life away but it's a great escape.\",\n        \"length\":  186\n    },\n\n    {\n        \"race\": \"I wish that i could turn back time, 'cause now the guilt is all mine. I can't live without the trust from those you love.\",\n        \"length\":  121\n    }\n]\n\n\n"],"sourceRoot":""}